% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/fviz_cluster.R
\name{fviz_cluster}
\alias{fviz_cluster}
\alias{fviz_silhouette}
\title{Visualize clustering results}
\usage{
fviz_cluster(object, data = NULL, stand = TRUE, geom = c("point", "text"),
  show.clust.cent = TRUE, frame = TRUE, frame.type = "convex",
  frame.level = 0.95, frame.alpha = 0.2, pointsize = 2, labelsize = 4,
  jitter = list(what = "label", width = NULL, height = NULL),
  outlier.color = "black", outlier.shape = 19, ...)

fviz_silhouette(sil.obj, label = FALSE, print.summary = TRUE)
}
\arguments{
\item{object}{an object of class "partition" created by the functions pam(), clara() or fanny()
in cluster package; "kmeans" [in stats package]; "dbscan" [in fpc package]; "Mclust" [in mclust].
Possible value are also any list object with data and cluster components
(e.g.: object = list(data = mydata, cluster = myclust)).}

\item{data}{the data that has been used for clustering. Required only when object is a class of kmeans or dbscan.}

\item{stand}{logical value; if TRUE, data is standardized before principal component analysis}

\item{geom}{a text specifying the geometry to be used for the graph.
Allowed values are the combination of c("point", "text").
Use "point" (to show only points);  "text" to show only labels; c("point", "text") to show both types.}

\item{show.clust.cent}{logical; if TRUE, shows cluster centers}

\item{frame}{logical value; if TRUE, draws outline around points of each cluster}

\item{frame.type}{Character specifying frame type.
Possible values are 'convex' or types supporeted by \code{ggplot2::stat_ellipse}
including one of c("t", "norm", "euclid").}

\item{frame.level}{Passed for \code{ggplot2::stat_ellipse} 's level. Ignored in 'convex'.
Default value is 0.95.}

\item{frame.alpha}{Alpha for frame specifying the transparency level of fill color.}

\item{pointsize}{the size of points}

\item{labelsize}{font size for the labels}

\item{jitter}{a parameter used to jitter the points in order to reduce overplotting.
It's a list containing the objects what, width and height (i.e jitter = list(what, width, height)).
\itemize{
\item what: the element to be jittered. Possible values are "point" or "p"; "label" or "l"; "both" or "b".
\item width: degree of jitter in x direction
\item height: degree of jitter in y direction
}}

\item{outlier.color,outlier.shape:}{the color and the shape of outliers.
Outliers can be detected only in DBSCAN clustering.}

\item{...}{others arguments to be passed to the function ggplot2::autoplot()}

\item{sil.obj}{an object of class silhouette [from cluster package]}

\item{label}{logical value. If true, x axis tick labels are shown}

\item{print.summary}{logical value. If true a summary of cluster silhouettes are printed}
}
\value{
a ggplot2 plot
}
\description{
Draws a 2-dimensional cluster plot for visualizing the results of partitioning methods,
including kmeans [stats package]; pam, clara and fanny [cluster package]; dbscan [fpc package];
Mclust [mclust package].
Observations are represented by points in the plot, using principal components if ncol(data) > 2.
An ellipse is drawn around each cluster.\cr\cr
\itemize{
\item{fviz_cluster(): Draws the result of partitioning methods}
\item{fviz_silhouette(): Draws the result of silhouette() [cluster package]}
}
}
\examples{
\donttest{
set.seed(123)
# K-means clustering
data(USArrests)
km.res <- kmeans(scale(USArrests), 4, nstart = 25)

# Visualize kmeans clustering
fviz_cluster(km.res, USArrests)
# Silhouette plot for k-means clusters
library(cluster)
sil <- silhouette(km.res$cluster, dist(scale(USArrests)))
fviz_silhouette(sil)

# Visualize pam clustering
data("iris")
pam.res <- pam(scale(iris[, -5]), 3)
fviz_cluster(pam.res)

# Change frame type
fviz_cluster(pam.res, frame.type = "t")

# Remove ellipse fill color
# Change frame level
fviz_cluster(pam.res, frame.type = "t",
            frame.alpha = 0, frame.level = 0.7)

# Show point only
fviz_cluster(pam.res, geom = "point")

# Show text only
fviz_cluster(pam.res, geom = "text")

# Change the color and theme
fviz_cluster(pam.res) +
 scale_color_brewer(palette = "Set2")+
 scale_fill_brewer(palette = "Set2") +
 theme_minimal()

 # Silhouette plot of pam clusters
 library(cluster)
 fviz_silhouette(silhouette(pam.res))
}
}

